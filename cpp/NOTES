
Testing with gdb
================
In test.cpp, I have a couple blocks that build a random matrix.  I usually want to run this a gazillion times to see if it breaks things.  If it breaks things bad enough, I'll get a seg fault or something.  I can make gdb run test a bunch by doing the following:

$ gdb test
(gdb) break exit
(gdb) commands
(gdb) run
(gdb) exit
(gdb) run

This will put a breakpoint at the exit statement of test and run the code a bunch or until it segfaults.



valgrind


Overloading
===========
C++ doesn't allow for overloading based on return type.
Easiest fix is to just change the function names.
Maybe see what Armadillo does.


using
=====
Some people recommend not using the using directive in header files.  Probably doesn't matter for me.


lambdas
=======
Can't implicitly convert a lambda function that captures variables into a function pointer.  Like, it's not in the standard or something.  I can use the function class from the <functional> header.

http://stackoverflow.com/questions/5853186/conversion-of-lambda-expression-to-function-pointer?lq=1


template iterators
==================
I tried something like vector<level<T>>::iterator.  g++ said this wasn't a type.  I needed to define this as a template typename by using
   typename vector<level<T>>::iterator

since the iterator is dependant on T.

http://stackoverflow.com/questions/5192874/question-about-vector-iterator-in-template-functions



TODO
====
* LU+PP direct solve (probably okay to go to dense array)
* Test mu-cycle with mu != 1
* FMG

